# У цьому прикладі ми маємо клас Person,
# який має методи для отримання імені та відображення екземпляра у вигляді рядка.
# Ми також створюємо екземпляри цього класу для осіб "John" та "Marry",
# а також працюємо зі списком словників, який містить дані про цих осіб.


# Визначення класу "Person"
class Person:
    # Конструктор класу, який викликається при створенні екземпляра класу
    # В цьому конструкторі приймаються два параметри - ім'я та вік
    # Зараз він закоментований, тому ми не можемо передавати ці параметри
    #  при створенні екземпляра
    # def __init__(self, name, age) -> None:
    #     self.name = name
    #     self.age = age

    # Метод для отримання імені особи
    def get_name(self):
        print(f"Name is {self.name}")

    # Метод для відображення екземпляра класу у вигляді рядка
    def __repr__(self) -> str:
        return f"name={self.name}. {self.age=}"


# Список словників, де кожен словник містить дані про особу
team = [
    {"name": "John", "age": 12},
    {"name": "Marry", "age": 22},
]

# Створення екземпляра класу "Person" для "John"
john = Person()
john.name = "John"
john.age = 12
# Створення екземпляра класу "Person" для "Marry"
marry = Person()
# Закоментований рядок, який показує, як би ми створювали екземпляр,
# якщо б конструктор не був закоментований
# marry = Person(name="Marry", age=22)

# Виведення імені "John"
print(john.name)
# Закоментований рядок, який мав би вивести ім'я "Marry",
# але не робить цього через відсутність команди print
# marry.name

# Закоментовані виклики методу get_name для екземплярів "john" та "marry"
# john.get_name()
# marry.get_name()

# Виведення екземпляра "john" у вигляді рядка за допомогою методу __repr__
print(john)

# Закоментований цикл, який мав би перевіряти наявність імені
# в кожному словнику списку "team"
# # print(team[1]["name"])
# for i in range(10):
#     if not team[i].get("name"):
#         print(f"No name in {team[1]}")
#     else:
#         print(team[1]["name"])
